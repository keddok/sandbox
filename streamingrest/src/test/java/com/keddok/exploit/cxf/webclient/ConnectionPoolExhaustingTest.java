package com.keddok.exploit.cxf.webclient;

import org.apache.cxf.helpers.IOUtils;
import org.apache.cxf.jaxrs.client.WebClient;
import org.junit.Test;

import java.io.InputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * @author RMakhmutov
 * @since 21.12.2017
 */
public class ConnectionPoolExhaustingTest {
    @Test
    public void testOk() {
        for (int i=0; i<60; i++)
            assert "ok".equals(safeCallService());
    }

    private String safeCallService() {
        WebClient client = WebClient.create("http://localhost:8080/exploit").path("echo");
        try {
            return client.get().readEntity(String.class);
        } finally {
            if (client.getResponse() != null)
                client.getResponse().close();
        }
    }

    @Test
    public void testFail() {
        ExecutorService pool = Executors.newFixedThreadPool(10);
        for (;;) {
            pool.execute(() -> {
                assert unsafeCallService(Integer.toString(1)) != null;
            });
        }
    }

    private String unsafeCallService(String paramValue) {
        try {
            WebClient client = WebClient.create("http://localhost:8080/exploit").path("getlist").query("value", paramValue);
            String out = IOUtils.toString((InputStream) client.get().getEntity(), "UTF-8");
            return out;
        }
        catch (Exception ex) {
            /// ignored
        }

        return null;
    }

    private String safeCallService(String paramValue) {
        try {
            WebClient client = WebClient.create("http://localhost:8080/exploit").path("echo");
            try {
                return client.get().readEntity(String.class);
            } finally {
                if (client.getResponse() != null)
                    client.getResponse().close();
            }
        }
        catch (Exception ex) {
            /// ignored
        }

        return null;
    }
}
